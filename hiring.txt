1.Managed Kubernetes Service â€“ Amazon EKS

   . Amazon Elastic Kubernetes Service (Amazon EKS) is a managed Kubernetes service to run Kubernetes in the AWS cloud and on-premises data centers.
   . Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.

2. MongoDB

   . MongoDB makes it easy for developers to store structured or unstructured data.
   . It uses a JSON-like format to store documents.
   . developing scalable applications with evolving data schemas

3. Flask

  . Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries
  . It has no database
  . There is a built-in development server and a fast debugger provided.


4. ReactJS

   . React is a free and open-source front-end JavaScript library for building user interfaces based on components
   . It's used for building interactive user interfaces and web applications quickly and efficiently with significantly less code than you would with vanilla JavaScript.


5. docker

  . you can quickly deploy and scale applications into any environment and know your code will run
  . Programming language: Go



                                          Launching an EKS Cluster
                                           

 1.Launch an EC2 Instance

   .Click Launch Instance.On the AMI page, select the Amazon Linux 2 AMI. Leave t2.micro selected, and Click Connect instance

 2.Create an IAM User with Admin Permissions

   . Navigate to IAM > Users.
   . Click Add user. Set the following values:
   . User name: k8-admin
   . Access type: Programmatic access
   . Click Next: Permissions.
   . Select Attach existing policies directly.
   . Select AdministratorAccess.
   . Click Next: Tags > Next: Review.
   . Click Create user.
   . Copy the access key ID and secret access key

 3. AWS CLI installation

   . In the command line window, check the AWS CLI version:
      aws --version 
 
4. Configure the CLI
    . aws configure
   For AWS Access Key ID, paste in the access key ID you copied earlier.
   For AWS Secret Access Key, paste in the secret access key you copied earlier.
   For Default region name, none.
   For Default output format, none.

5. Download kubectl:
   curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl

   . Apply execute permissions to the binary:
       chmod +x ./kubectl

   . Copy the binary to a directory in your path:
      mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin

   . Ensure kubectl is installed:
       kubectl version --short --client

6. Download eksctl:
    curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

   . Move the extracted binary to /usr/bin:
      sudo mv /tmp/eksctl /usr/bin

   . Get the version of eksctl:
       eksctl version

7. Provision an EKS cluster with three worker nodes in us-east-1:
     eksctl create cluster --name dev --region us-east-1 --nodegroup-name standard-workers --node-type t2.micro --nodes 1 --nodes-min 1 --  nodes-max 2 --managed